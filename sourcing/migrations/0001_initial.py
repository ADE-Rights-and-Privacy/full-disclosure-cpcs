# Generated by Django 3.1.3 on 2021-02-11 08:25

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import inheritable.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('supporting', '0001_initial'),
        ('fdpuser', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('for_admin_only', models.BooleanField(default=False, help_text='Select if only administrators for the specified organizations can access.', verbose_name='admin only')),
                ('for_host_only', models.BooleanField(default=False, help_text="Select if only users belonging to the host organization can access. When combined with 'admin only', then only host administrators can access.", verbose_name='host only')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('name', models.CharField(help_text='Name of attachment. If a user-friendly name is not available, use the file name, title of article, etc.', max_length=254, verbose_name='name')),
                ('file', models.FileField(blank=True, help_text='Uploaded file as the attachment. Should be less than 100MB. Ignore if linking an attachment via the web.', max_length=254, upload_to='attm/%Y/%m/%d/%H/%M/%S/', validators=[inheritable.models.AbstractFileValidator.validate_attachment_file_size, inheritable.models.AbstractFileValidator.validate_attachment_file_extension])),
                ('extension', models.CharField(blank=True, help_text='File extension for attachment. Ignore if linking an attachment via the web.', max_length=10, verbose_name='file extension')),
                ('link', models.URLField(blank=True, help_text='URL for an attachment linked via the web. Ignore if uploading a file as the attachment.', verbose_name='web link')),
                ('fdp_organizations', models.ManyToManyField(blank=True, db_table='fdp_attachment_fdp_organization', help_text='FDP organizations, which have exclusive access to attachment. Leave blank if all registered users can access.', related_name='attachments', related_query_name='attachment', to='fdpuser.FdpOrganization', verbose_name='organization access')),
                ('type', models.ForeignKey(blank=True, help_text='Category for attachment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attachments', related_query_name='attachment', to='supporting.attachmenttype', verbose_name='type')),
            ],
            options={
                'verbose_name': 'attachment',
                'db_table': 'fdp_attachment',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('for_admin_only', models.BooleanField(default=False, help_text='Select if only administrators for the specified organizations can access.', verbose_name='admin only')),
                ('for_host_only', models.BooleanField(default=False, help_text="Select if only users belonging to the host organization can access. When combined with 'admin only', then only host administrators can access.", verbose_name='host only')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('name', models.CharField(help_text='Name of content. Use this for the article headline, report title or other user-friendly name.', max_length=254, verbose_name='name')),
                ('link', models.URLField(blank=True, default='', help_text='URL from which content was retrieved', max_length=500, verbose_name='web link')),
                ('publication_date', models.DateField(blank=True, help_text='Date content was published', null=True, verbose_name='publication date')),
                ('attachments', models.ManyToManyField(blank=True, db_table='fdp_content_attachment', help_text='Attachments from which content was derived', related_name='contents', related_query_name='content', to='sourcing.Attachment', verbose_name='attachments')),
                ('fdp_organizations', models.ManyToManyField(blank=True, db_table='fdp_content_fdp_organization', help_text='FDP organizations, which have exclusive access to content. Leave blank if all registered users can access.', related_name='contents', related_query_name='content', to='fdpuser.FdpOrganization', verbose_name='organization access')),
                ('incidents', models.ManyToManyField(blank=True, db_table='fdp_content_incident', help_text='Incidents based on this content', related_name='contents', related_query_name='content', to='core.Incident', verbose_name='incidents')),
                ('type', models.ForeignKey(blank=True, help_text='Category for content', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contents', related_query_name='content', to='supporting.contenttype', verbose_name='type')),
            ],
            options={
                'verbose_name': 'content',
                'db_table': 'fdp_content',
                'ordering': ['type', 'publication_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContentPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('is_guess', models.BooleanField(default=False, help_text='Select if link is a guess', verbose_name='Is this a guess')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('known_info', models.JSONField(blank=True, help_text='Known information to create record.', null=True, verbose_name='known information')),
                ('content', models.ForeignKey(help_text='Content linked to this person', on_delete=django.db.models.deletion.CASCADE, related_name='content_persons', related_query_name='content_person', to='sourcing.content', verbose_name='content')),
                ('person', models.ForeignKey(help_text='Person linked to a content', on_delete=django.db.models.deletion.CASCADE, related_name='content_persons', related_query_name='content_person', to='core.person', verbose_name='person')),
                ('situation_role', models.ForeignKey(blank=True, help_text='Context with which person is linked to content, such as attorney, plaintiff or similar', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_persons', related_query_name='content_person', to='supporting.situationrole', verbose_name='situation role')),
            ],
            options={
                'verbose_name': 'link between content and person',
                'verbose_name_plural': 'links between contents and people',
                'db_table': 'fdp_content_person',
                'ordering': ['content', 'situation_role', 'person'],
                'unique_together': {('content', 'situation_role', 'person')},
            },
        ),
        migrations.CreateModel(
            name='ContentPersonPenalty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('penalty_requested', models.CharField(blank=True, default='', help_text='Penalty requested for person linked to content', max_length=254, verbose_name='penalty requested')),
                ('penalty_received', models.CharField(blank=True, default='', help_text='Penalty received for person linked to content', max_length=500, verbose_name='penalty received')),
                ('discipline_date', models.DateField(blank=True, help_text='Date that penalty was imposed for person linked to content', max_length=254, null=True, verbose_name='discipline date')),
                ('content_person', models.ForeignKey(help_text='Person and content that provide the context for the penalty', on_delete=django.db.models.deletion.CASCADE, related_name='content_person_penalties', related_query_name='content_person_penalty', to='sourcing.contentperson', verbose_name='person-content link')),
            ],
            options={
                'verbose_name': 'Penalty for person linked to content',
                'verbose_name_plural': 'Penalties for people linked to contents',
                'db_table': 'fdp_content_person_penalty',
                'ordering': ['content_person', 'discipline_date'],
            },
        ),
        migrations.CreateModel(
            name='ContentCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('start_year', models.PositiveSmallIntegerField(default=0, help_text='Year of start, use 0 if unknown', validators=[inheritable.models.AbstractDateValidator.validate_year], verbose_name='starting year')),
                ('start_month', models.PositiveSmallIntegerField(default=0, help_text='Month of start, use 0 if unknown', validators=[inheritable.models.AbstractDateValidator.validate_month], verbose_name='starting month')),
                ('start_day', models.PositiveSmallIntegerField(default=0, help_text='Day of start, use 0 if unknown', validators=[inheritable.models.AbstractDateValidator.validate_day], verbose_name='starting day')),
                ('end_year', models.PositiveSmallIntegerField(default=0, help_text='Year of end, use 0 if unknown', validators=[inheritable.models.AbstractDateValidator.validate_year], verbose_name='ending year')),
                ('end_month', models.PositiveSmallIntegerField(default=0, help_text='Month of end, use 0 if unknown', validators=[inheritable.models.AbstractDateValidator.validate_month], verbose_name='ending month')),
                ('end_day', models.PositiveSmallIntegerField(default=0, help_text='Day of end, use 0 if unknown', validators=[inheritable.models.AbstractDateValidator.validate_day], verbose_name='ending day')),
                ('settlement_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount received by plaintiff as settlement', max_digits=12, null=True, verbose_name='settlement amount')),
                ('content', models.OneToOneField(help_text='Content based on this lawsuit', on_delete=django.db.models.deletion.CASCADE, related_name='content_case', related_query_name='content_case', to='sourcing.content', verbose_name='Content')),
                ('court', models.ForeignKey(blank=True, help_text='Court or agency in which case was pursued', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_cases', related_query_name='content_case', to='supporting.court', verbose_name='court')),
                ('outcome', models.ForeignKey(blank=True, help_text='Outcome of lawsuit such as dismissed or similar', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_cases', related_query_name='content_case', to='supporting.contentcaseoutcome', verbose_name='case disposition')),
            ],
            options={
                'verbose_name': 'content case',
                'db_table': 'fdp_content_case',
                'ordering': ['content'],
            },
        ),
        migrations.CreateModel(
            name='ContentPersonAllegation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('allegation_count', models.PositiveSmallIntegerField(default=1, help_text='Number of same allegations with this outcome against the person in the context of the content', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='allegation count')),
                ('allegation', models.ForeignKey(help_text='Allegation against the person in the context of the content', on_delete=django.db.models.deletion.CASCADE, related_name='content_person_allegations', related_query_name='content_person_allegation', to='supporting.allegation', verbose_name='allegation')),
                ('allegation_outcome', models.ForeignKey(blank=True, help_text='Outcome of allegation against the person in the context of the content', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_person_allegations', related_query_name='content_person_allegation', to='supporting.allegationoutcome', verbose_name='allegation outcome')),
                ('content_person', models.ForeignKey(help_text='Person and content that provide the context for the allegation', on_delete=django.db.models.deletion.CASCADE, related_name='content_person_allegations', related_query_name='content_person_allegation', to='sourcing.contentperson', verbose_name='person-content link')),
            ],
            options={
                'verbose_name': 'Allegation against person linked to content',
                'verbose_name_plural': 'Allegations against people linked to contents',
                'db_table': 'fdp_content_person_allegation',
                'ordering': ['content_person', 'allegation'],
                'unique_together': {('content_person', 'allegation', 'allegation_outcome')},
            },
        ),
        migrations.CreateModel(
            name='ContentIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_archived', models.BooleanField(default=False, help_text='Select if record is archived', verbose_name='Is archived')),
                ('for_admin_only', models.BooleanField(default=False, help_text='Select if only administrators for the specified organizations can access.', verbose_name='admin only')),
                ('for_host_only', models.BooleanField(default=False, help_text="Select if only users belonging to the host organization can access. When combined with 'admin only', then only host administrators can access.", verbose_name='host only')),
                ('description', models.TextField(blank=True, help_text='Verbose, user-friendly narrative', verbose_name='Description')),
                ('identifier', models.CharField(help_text='Identifier number, such as the lawsuit number, IAB case number, or similar', max_length=254, verbose_name='number')),
                ('content', models.ForeignKey(help_text='Content linked to this identifier', on_delete=django.db.models.deletion.CASCADE, related_name='content_identifiers', related_query_name='content_identifier', to='sourcing.content', verbose_name='Content')),
                ('content_identifier_type', models.ForeignKey(help_text='Context for identifier, such as lawsuit, IAB case, or similar', on_delete=django.db.models.deletion.CASCADE, related_name='content_identifiers', related_query_name='content_identifier', to='supporting.contentidentifiertype', verbose_name='content identifier type')),
                ('fdp_organizations', models.ManyToManyField(blank=True, db_table='fdp_content_identifier_fdp_organization', help_text='FDP organizations, which have exclusive access to content identifier. Leave blank if all registered users can access.', related_name='content_identifiers', related_query_name='content_identifier', to='fdpuser.FdpOrganization', verbose_name='organization access')),
            ],
            options={
                'verbose_name': 'content identifier',
                'db_table': 'fdp_content_identifier',
                'ordering': ['content', 'content_identifier_type'],
                'unique_together': {('content', 'content_identifier_type', 'identifier')},
            },
        ),
    ]
